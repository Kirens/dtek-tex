#! /usr/bin/env bash

export verb=false
export ignoreMissing=false
export needHelp=false
export overwrite=false

bold() {
  echo "$(tput bold)$@$(tput sgr0)"
}


# Build helpers
build() {
  for i in $(seq 2)
  do
    timeout 5 \
      xelatex -halt-on-error -output-directory=out -jobname="$1" "$1.reg.tex"
    exitCode=$?
    if [ "$exitCode" != "0" ]
    then
      return $exitCode
    fi
  done
}
compile() {
  start=`date +%s%N`
  buildLog=$(build "$1")
  exitCode=$?
  end=`date +%s%N`

  time=$((end-start))
  secs=$(echo $time | head -c -10)
  nanos=$(echo $time | tail -c -10)
  echo Document compiled in $secs.$nanos seconds

  if [ "$exitCode" != "0" -o "$verb" = "true" ]
  then
    echo "$buildLog"
  fi
  return "$exitCode"
}


# Actual testscript
buildAndTestAll() {
  if [ "$overwrite" = "true" ]
  then
    referenceCommand="cp"
    preMessage="Building"
    postMessage="Reference file created"
  else
    referenceCommand="diff"
    preMessage="Testing"
    postMessage="Test successfull"
  fi

  for dir in $(find -maxdepth 1 -mindepth 1 -type d | sort)
  do
    cd $dir
    if [ "$overwrite" = "true" ]
    then
      if [ -e reference ]
      then
        echo Removing all reference files in "$dir"
        rm -r reference
      fi
      mkdir reference
    fi

    bold Looking for regression files in "$dir"
    for file in $(ls | grep -oP '^.*(?=\.reg.tex)')
    do
      # Check if a file to compare against exists
      if [ "$ignoreMissing" = "false" -o -e "reference/$file.pdf" ]
      then
        if [ -e out ]
        then
          rm -r out
        fi
        mkdir out

        echo "$preMessage $dir/$file..."
        compile "$file"
        exitCode=$?
        if [ "$exitCode" != "0" ]
        then
          return $exitCode
        fi

        $referenceCommand "out/$file.pdf" "reference/$file.pdf"
        exitCode=$?
        if [ "$exitCode" != "0" ]
        then
          return $exitCode
        fi
        echo "$postMessage"

        rm -r out
      fi
    done
    cd ..
  done
}

# Argument handeler
for var in "$@"
do
  case $var in
  --verbose|-v)
    verb=true
    optionLogs="${optionLogs}Will output complete build logs\n"
    ;;
  --ignore-missing|-i)
    ignoreMissing=true
    optionLogs="${optionLogs}Ignoring files that doesn\'t have a reference\n"
    ;;
  --overwrite|-o)
    overwrite=true
    optionLogs="${optionLogs}Will rebuild reference files\n"
    ;;
  --help|*)
    needHelp=true
    ;;
  esac
done

if [ "$needHelp" = "true" ]
then
  echo  Usage: ./compare [OPTIONS]
  echo
  echo  Performs regresion tests on example files
  echo
  echo If no options says otherwise a regression test against the reference
  echo pdf:s will be performed.
  echo
  bold  OPTIONS
  bold '  --help'
  echo '    Print this message'
  bold '  -o, --overwrite'
  echo '    Generate references from the testfiles to be used in future'
  echo '    regression tests instead of performing tests.'
  bold '  -v, --verbose'
  echo '    Prints build logs when build either succeeded or failed'
  bold '  -i, --ignore-missing'
  echo '    Does not build or compare files where a reference file is missing'
  echo

  exit 0
fi

printf "$optionLogs"

# Run test and prompt user with the result
if buildAndTestAll
then
  echo - SUCCESS! -------------------------------------------------------------
  echo All .reg.tex files tested!
else
  echo - FAILURE! -------------------------------------------------------------
  echo A test failed! Se above logs for more details.
fi
